========================================
Сервис оценки качества произношения
========================================


На входе для каждой фразы есть набор образцов с правильным произношением.
Неправильные будем набирать в процессе тестирования



Признаками звукозаписи является последовательность векторов MFCC:
- запись покрывается окнами длиной примерно 0.25 мс с шагом 10 мс
- для каждого окна вычисляется набор признаков MFCC
- также в каждом окне вычисляются 1-я и 2-я производная от вектора MFCC по времени

После этого переходим к обучению программы.





-----------------------------------------------
Вычисление первичных признаков в одном окне
-----------------------------------------------

1) Файл загружается в память и преобразуется в массив чисел + FPS
   Надо привести FPS к стандартному значению, например 22kHz или 16kHz

2) Массив чисел нормируется по амплитуде (чтобы максимальная амплитуда равнялась 1)
   (Надо попробовать)

3) Выполняется поиск начала и конца речи 
   (чтобы длительность молчания в начале и конце записи была у всех одинакова)
   Выполняем поиск пауз, слишком длинные сокращаем, короткие паузы не изменяем
   См поиск_тишины

4) Убираем шум (пока непонятно, как именно)

5) Промежуток от начала до конца речи делится на окна, 
   Лучше будет, если в каждом окне количество точек с данными будет равно 2^N
   (Испытать N=128, 256, 512, 1024)
   для каждого окна вычисляем вектор признаков MFCC из 16 чисел
   (меньше 13 никто не берёт, больше 32 тоже, надо будет подобрать количество в экспериментах)
   См Вычисление_MFCC

6) Каждому окну кроме MFCC приписываем уровень_энергии


На выходе получаем массив признаков:
    Для каждого окна:
        вектор MFCC
        значение энергии

-----------------------------------------------
Вычисление_энергии
-----------------------------------------------
Свёртка амплитуды с собой = выборочная оценка дисперсии значений амплитуды в окне
Среднее значение амплитуды считаем нулевым.

-----------------------------------------------
Вычисление_MFCC (окно, fps)
-----------------------------------------------
   4.1 выполняем быстрое преобразование Фурье
   4.2 умножаем спектр на M разных функций
   4.3 и выполняем обратное косинусное преобразование, получая M чисел - вектор MFCC
   Эту часть лучше оптимизировать по скорости


-----------------------------------------------
поиск_тишины
-----------------------------------------------
Составляем гистограмму : количество окон + значение энергии

Приближаем гистограмму суммой 2-х нормальных распределений,
Находим минимум суммы - это будет пороговое значение энергии между речью и тишиной.

Или интерполяция по гистограмме
Или сглаживание по гистограмме



-----------------------------------------------
Разделение_на_фонемы
-----------------------------------------------
Способ 1
1) составляем матрицу расстояний: 
   в точке (x,y) вписываем расстояние между признаками окна x и окна y
   вычисления должны быть ленивыми (т.е. число не вычисляется, пока не понадобится)
2) пройти над диагональю
   и найти локальные максимумы сглаженной функции расстояния
3) пройти по 2-й наддиагонали
   и найти локальные максимумы сглаженной функции расстояния
   ...
4) пройти по N-й наддиагонали
   и найти локальные максимумы сглаженной функции расстояния
5) отметить локальные максимумы, которые встретились во всех 
   N множествах и считать эти максимумы границами фонем.


Способ 2
Вычислять сумму расстояний S(n) 
в квадрате  x=x1..x1+n && y=y1..y1+n
и смотреть, когда sqrt(S(n)) - sqrt(S(n-1)) значительно изменится
т.е. найти максимум функции 
d2S(n) = sqrt(S(n-1)) - 2*sqrt(S(n)) +sqrt(S(n+1))

"Значительно" подразумевает некое пороговое значение.

После разделения на фонемы мы получаем последовательность чисел -
номера окон, которые считаются границами фонем.



-----------------------------------------------
Выбор_представителя_обучающей_выборки
-----------------------------------------------

Выбираем типичного представителя из набора звукозаписей

Для каждой пары записей из обучающего набора

(1) Вычисляем, насколько сильно надо преобразовать время.
    t2 = f(t1)  df/dt >=0 
    Это площадь между диагональю (идеальное решение) и реальным отображением.
    Чтобы соблюсти масштаб, разделим на площадь прямоугольника

(2) Вычисляем, сумму расстояний после преобразования времени
    Чтобы соблюсти масштаб, разделим сумму расстояний на длину линии.

(3) Вычисляем количество окон в образце.

Расширение: разделить на фонемы и для каждой фонемы отдельно
вычислить (1) и (2)

Потом вычисляем по каждому измерению среднее значение <x[i]> и дисперсию D2[i]
Выбираем образец, у которого минимально значение величины
			Summa[ (x[i] - <x[i]>)^2 / D2[i], i=1, M ]
где i - номер признака


На выходе имеем один образец - представитель_обучающей_выборки.



-----------------------------------------------
Подготовка данных
-----------------------------------------------

На входе : 
представитель_обучающей_выборки
вся обучающая выборка (множество образцов)

У представителя_обучающей_выборки находим фонемы

На выходе
Отображение: образец -> набор_признаков.

Набор_признаков:
    - Функция_преобразования_времени из времени представителя_обучающей_выборки во время образца, задаётся в табличной форме. f(t) = t + E(t)
    - на основе Функции_преобразования_времени найти вектора признаков в образце, возможно, понадобится брать среднее из нескольких точек.
    - Вычислить производные по времени от MFCC (надо проверить, сработает ли)
    - каждому вектору признаков сопоставляем номер фонемы.







-----------------------------------------------
Классификатор, Версия 1
-----------------------------------------------

	-----------------------------------------------
	Обучение
	-----------------------------------------------
	На вход получаем все Наборы_признаков 

    В каждый момент времени каждую координату приближаем нормальным распределением
    кроме номера фонемы


    На выходе получаем распределение_набора_признаков:
    для каждого признака в каждый момент времени
    - среднее значение и дисперсия
    - номер фонемы

    Отдельно - количество образцов в обучающей выборке


	-----------------------------------------------
	Распознавание
	-----------------------------------------------
    Вход:
    - представитель_обучающей_выборки
    - неизвестный_образец
    - распределение_набора_признаков

    Выполняем подготовку_данных с представителем_обучающей_выборки и неизвестным_образцом
    получаем набор_признаков_неизвестного_образца

    С помощью распределения_набора_признаков и набор_признаков_неизвестного_образца вычислить
    уровень_значимости

    Сравнить уровень_значимости с пороговыми значениями
    (отлично, хорошо, удовлетворительно, плохо)



-----------------------------------------------
Классификатор, Версия 2, Скрытая марковская модель
-----------------------------------------------

  -----------------------------------------------
  Обучение
  -----------------------------------------------
  На вход получаем 
  - все Наборы_признаков 
  - количество элементов модели = количество окон у представителя_обучающей_выборки
    (? если не слишком долго)

  Обучаем скрытую марковская модель


  -----------------------------------------------
  Распознавание
  -----------------------------------------------

    Вход:
    - представитель_обучающей_выборки
    - неизвестный_образец
    - обученная скрытая марковская модель

    Выполняем подготовку_данных с представителем_обучающей_выборки и неизвестным_образцом
    получаем набор_признаков_неизвестного_образца

    Скрытая марковская модель выдаёт вероятность.







-----------------------------------------------
Источник обучающей выборки
-----------------------------------------------
http://voxforge.org/home/Downloads











-----------------------------------------------
Оценка произношения
-----------------------------------------------

1) сервлет принимает из сети отправленный файл и сохраняет его в какую-то директорию,
   файл потом будет использован для обучения программы.
   Сервлет должен проверить права доступа (например, некий токен с ограниченным временем жизни)
2) вычисляем первичные признаки файла
3) методом DTW совмещаем первичные признаки с главным образцом.
4) интерполяцией извлекаем _правильное_ количество признаков.
5) передаём признаки в Классификатор


